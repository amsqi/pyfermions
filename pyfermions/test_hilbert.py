import numpy as np
from .hilbert import *


def test_allpass():
    assert np.allclose(allpass(1 / 2, 2), [1, 2, 1 / 5])
    assert np.allclose(allpass(1 / 2, 3), [1, 5, 3, 1 / 7])


def test_leja():
    N = 100
    roots = np.exp(1j * np.arange(N) * 2 * np.pi / N)
    poly = np.poly(leja(roots))
    poly_expected = np.zeros(N + 1)
    poly_expected[0] = 1
    poly_expected[-1] = -1
    assert np.allclose(poly, poly_expected)


def test_sfact_real():
    N = 100
    g = np.random.rand(N)
    h = np.convolve(g, g[::-1])
    g = sfact(h)
    assert np.allclose(h, np.convolve(g, g[::-1]))


def test_sfact_complex():
    N = 100
    g = np.random.rand(N) + 1j * np.random.rand(N)
    h = np.convolve(g, g[::-1])
    g = sfact(h)
    assert np.allclose(h, np.convolve(g, g[::-1]), atol=1e-7)


def test_sfact_roots_of_unity():
    N = 100
    roots = np.r_[np.exp(1j * np.arange(N) * 2 * np.pi / N), [-1, +1]]
    h = np.poly(leja(roots))
    g = sfact(h)
    assert np.allclose(h, np.convolve(g, g[::-1]))


def test_sfact_vs_matlab_sfactM():
    h = [
        0.235_008_08,
        0.402_926_36,
        0.197_671_72,
        0.803_147_86,
        1.148_414_6,
        0.660_625_1,
        1.129_839_91,
        1.761_512_14,
        1.817_220_44,
        1.966_754_52,
        2.036_778_09,
        1.618_078_76,
        2.180_165_04,
        3.004_016_2,
        2.997_601_05,
        3.029_040_11,
        3.362_371_75,
        2.917_115_83,
        3.702_461_32,
        5.510_760_04,
        3.702_461_32,
        2.917_115_83,
        3.362_371_75,
        3.029_040_11,
        2.997_601_05,
        3.004_016_2,
        2.180_165_04,
        1.618_078_76,
        2.036_778_09,
        1.966_754_52,
        1.817_220_44,
        1.761_512_14,
        1.129_839_91,
        0.660_625_1,
        1.148_414_6,
        0.803_147_86,
        0.197_671_72,
        0.402_926_36,
        0.235_008_08,
    ]
    g = sfact(h)
    assert np.allclose(h, np.convolve(g, g[::-1]))

    g_expected = [
        0.492_896_11,
        0.871_309_89,
        0.065_187_86,
        0.152_110_69,
        0.444_786,
        0.179_639_09,
        0.468_674_31,
        0.420_139_43,
        0.303_195_1,
        -0.112_751_17,
        0.637_390_43,
        0.955_722_41,
        0.702_259_29,
        0.826_084_58,
        0.209_580_84,
        0.426_936_5,
        0.808_911_74,
        0.382_834_47,
        -0.025_371_96,
        0.476_790_3,
    ]
    assert np.allclose(g, g_expected)


def test_hwlet_4_2_vs_matlab():
    expected_h = [
        -0.001_785_33,
        0.013_358_87,
        0.036_090_74,
        -0.034_722_19,
        0.041_525_06,
        0.560_358_37,
        0.774_586_17,
        0.227_520_75,
        -0.160_409_27,
        -0.061_694_25,
        0.017_099_41,
        0.002_285_23,
    ]
    expected_g = [
        -3.570_660_25e-04,
        -1.847_535_05e-04,
        3.259_148_58e-02,
        1.344_990_16e-02,
        -5.846_672_53e-02,
        2.746_430_77e-01,
        7.795_662_24e-01,
        5.409_737_89e-01,
        -4.031_500_79e-02,
        -1.332_013_79e-01,
        -5.912_129_57e-03,
        1.142_614_64e-02,
    ]

    h, g = selesnick_hwlet(4, 2)
    assert h.scaling_filter.start == g.scaling_filter.start == 0
    assert np.allclose(h.scaling_filter.data, expected_h)
    assert np.allclose(g.scaling_filter.data, expected_g)


def test_hwlet_7_3_vs_matlab():
    expected_h = [
        -0.000_008_509_559_837,
        0.000_155_053_328_906,
        0.000_335_908_682_589,
        -0.003_379_348_176_989,
        -0.001_317_563_525_896,
        0.020_806_061_482_011,
        -0.001_260_616_026_056,
        -0.058_104_797_961_116,
        0.054_771_136_286_585,
        0.146_767_682_794_254,
        -0.266_672_541_675_869,
        -0.758_239_803_854_417,
        -0.560_666_055_445_088,
        -0.051_046_983_845_276,
        0.089_849_110_821_292,
        -0.001_431_140_280_180,
        -0.023_599_660_375_478,
        -0.002_713_741_951_713,
        0.001_462_009_640_675,
        0.000_080_237_287_438,
    ]
    expected_g = [
        -0.000_001_215_651_405,
        0.000_002_700_053_073,
        0.000_460_745_831_039,
        -0.001_019_936_542_747,
        -0.004_774_611_651_203,
        0.009_325_818_768_637,
        0.020_111_376_966_657,
        -0.037_222_043_377_477,
        -0.027_543_138_327_351,
        0.140_004_382_772_676,
        0.005_882_790_359_188,
        -0.565_220_412_816_159,
        -0.752_956_521_033_365,
        -0.287_558_708_554_270,
        0.075_533_433_775_397,
        0.046_016_083_257_261,
        -0.025_067_132_737_740,
        -0.011_996_325_750_141,
        0.001_247_491_291_702,
        0.000_561_661_012_064,
    ]

    h, g = selesnick_hwlet(7, 3)
    assert h.scaling_filter.start == g.scaling_filter.start == 0
    assert np.allclose(h.scaling_filter.data, expected_h)
    assert np.allclose(g.scaling_filter.data, expected_g)
